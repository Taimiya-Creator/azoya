"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Rocket, Sparkles, Download, Loader, AlertTriangle, Code, Eye } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { handleGenerateWebsite } from "./actions";
import type { GenerateWebsiteCodeOutput } from "@/ai/flows/generate-website-code";
import CodeViewer from "@/components/code-viewer";
import { Skeleton } from "@/components/ui/skeleton";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

const formSchema = z.object({
  prompt: z.string().min(10, {
    message: "Please enter a more detailed prompt (at least 10 characters).",
  }),
});

export default function Home() {
  const [generatedCode, setGeneratedCode] = useState<GenerateWebsiteCodeOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: "",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsLoading(true);
    setGeneratedCode(null);
    const result = await handleGenerateWebsite(values.prompt);
    setIsLoading(false);

    if (result.success && result.data) {
      setGeneratedCode(result.data);
      toast({
        title: "Website Generated!",
        description: "Your new website is ready for preview.",
      });
    } else {
      toast({
        variant: "destructive",
        title: "Generation Failed",
        description: result.error || "An unknown error occurred.",
      });
    }
  };

  const downloadCode = () => {
    if (!generatedCode) return;
    const { html, css, javascript } = generatedCode;
    const fullHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated by PromptSite</title>
    <style>${css}</style>
</head>
<body>
    ${html}
    <script>${javascript || ''}</script>
</body>
</html>`;
    const blob = new Blob([fullHtml], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'index.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast({ title: "Download started!" });
  };
  
  const srcDoc = generatedCode ? `<html><head><style>${generatedCode.css}</style></head><body>${generatedCode.html}<script>${generatedCode.javascript || ''}</script></body></html>` : '';

  return (
    <div className="container mx-auto p-4 md:p-8">
      <header className="text-center mb-10">
        <h1 className="text-5xl font-bold tracking-tight flex items-center justify-center gap-3 font-headline">
          <Rocket className="w-12 h-12 text-primary" />
          PromptSite
        </h1>
        <p className="text-lg text-muted-foreground mt-2">Your ideas, instantly coded by Gemini AI.</p>
      </header>

      <main className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <section>
          <Card className="sticky top-8">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Sparkles className="text-accent" />
                    Describe Your Website
                  </CardTitle>
                  <CardDescription>Tell us what you want to build. Be as descriptive as possible!</CardDescription>
                </CardHeader>
                <CardContent>
                  <FormField
                    control={form.control}
                    name="prompt"
                    render={({ field }) => (
                      <FormItem>
                        <FormControl>
                          <Textarea
                            placeholder="e.g., A personal portfolio website with a dark theme, a section for my projects, and a contact form."
                            className="min-h-[200px] resize-y"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </CardContent>
                <CardFooter>
                  <Button type="submit" disabled={isLoading} className="w-full bg-accent hover:bg-accent/90">
                    {isLoading ? (
                      <>
                        <Loader className="mr-2 h-4 w-4 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      "Generate Website"
                    )}
                  </Button>
                </CardFooter>
              </form>
            </Form>
          </Card>
        </section>

        <section>
          {isLoading ? (
            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <Skeleton className="h-8 w-1/3" />
                <Skeleton className="h-10 w-24" />
              </CardHeader>
              <CardContent className="space-y-4">
                <Skeleton className="h-10 w-full" />
                <Skeleton className="aspect-video w-full" />
              </CardContent>
            </Card>
          ) : !generatedCode ? (
            <Card className="flex min-h-[600px] items-center justify-center border-dashed">
              <div className="text-center p-8">
                <div className="mx-auto w-fit rounded-full bg-secondary p-4">
                  <Eye className="h-12 w-12 text-muted-foreground" />
                </div>
                <h3 className="mt-6 text-lg font-medium font-headline">Preview Your Website</h3>
                <p className="mt-1 text-sm text-muted-foreground">
                  Your generated website preview will appear here.
                </p>
              </div>
            </Card>
          ) : (
            <Card>
              <Tabs defaultValue="preview" className="w-full">
                <CardHeader className="flex flex-row items-center justify-between">
                    <TabsList>
                      <TabsTrigger value="preview">Preview</TabsTrigger>
                      <TabsTrigger value="html">HTML</TabsTrigger>
                      <TabsTrigger value="css">CSS</TabsTrigger>
                      {generatedCode.javascript && <TabsTrigger value="js">JS</TabsTrigger>}
                    </TabsList>
                    <Button onClick={downloadCode}>
                      <Download className="mr-2 h-4 w-4" />
                      Download
                    </Button>
                </CardHeader>
                <CardContent>
                  <TabsContent value="preview">
                    <iframe
                      srcDoc={srcDoc}
                      title="Website Preview"
                      sandbox="allow-scripts allow-same-origin"
                      className="w-full h-[600px] border rounded-md bg-white"
                      loading="lazy"
                    />
                  </TabsContent>
                  <TabsContent value="html">
                    <CodeViewer code={generatedCode.html} language="html" />
                  </TabsContent>
                  <TabsContent value="css">
                    <CodeViewer code={generatedCode.css} language="css" />
                  </TabsContent>
                  {generatedCode.javascript && (
                    <TabsContent value="js">
                        <CodeViewer code={generatedCode.javascript} language="javascript" />
                    </TabsContent>
                  )}
                </CardContent>
              </Tabs>
            </Card>
          )}
        </section>
      </main>
    </div>
  );
}

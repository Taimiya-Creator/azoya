"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { ArrowRight, Download, Loader, Eye, Wand2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { handleGenerateWebsite } from "./actions";
import type { GenerateWebsiteCodeOutput } from "@/ai/flows/generate-website-code";
import CodeViewer from "@/components/code-viewer";
import { Skeleton } from "@/components/ui/skeleton";
import { Form, FormControl, FormField, FormItem, FormMessage } from "@/components/ui/form";
import { motion, AnimatePresence } from "framer-motion";

const formSchema = z.object({
  prompt: z.string().min(10, {
    message: "Please enter a more detailed prompt (at least 10 characters).",
  }),
});

export default function Home() {
  const [generatedCode, setGeneratedCode] = useState<GenerateWebsiteCodeOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: "",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    setIsLoading(true);
    setGeneratedCode(null);
    const result = await handleGenerateWebsite(values.prompt);
    setIsLoading(false);

    if (result.success && result.data) {
      setGeneratedCode(result.data);
      toast({
        title: "Website Generated!",
        description: "Your new website is ready for preview.",
      });
    } else {
      toast({
        variant: "destructive",
        title: "Generation Failed",
        description: result.error || "An unknown error occurred.",
      });
    }
  };

  const downloadCode = () => {
    if (!generatedCode) return;
    const { html, css, javascript } = generatedCode;
    const fullHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated by Azoya</title>
    <style>${css}</style>
</head>
<body>
    ${html}
    <script>${javascript || ''}</script>
</body>
</html>`;
    const blob = new Blob([fullHtml], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'index.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast({ title: "Download started!" });
  };
  
  const srcDoc = generatedCode ? `<html><head><style>${generatedCode.css}</style></head><body>${generatedCode.html}<script>${generatedCode.javascript || ''}</script></body></html>` : '';

  return (
    <div className="min-h-screen bg-grid-zinc-200/50 dark:bg-grid-zinc-800/50">
      <div className="container mx-auto p-4 md:p-8">
        <motion.header 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center my-12"
        >
          <div className="inline-block rounded-full bg-primary/10 p-2 mb-4">
            <Wand2 className="w-8 h-8 text-primary" />
          </div>
          <h1 className="text-5xl md:text-6xl font-bold tracking-tighter bg-clip-text text-transparent bg-gradient-to-b from-foreground to-foreground/70">
            Azoya
          </h1>
          <p className="text-lg md:text-xl text-muted-foreground mt-4 max-w-2xl mx-auto">Your ideas, instantly coded by Gemini AI.</p>
        </motion.header>

        <main className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
          <motion.section
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Card className="sticky top-8 shadow-lg backdrop-blur-sm bg-background/80">
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                  <CardHeader>
                    <CardTitle>Describe Your Website</CardTitle>
                    <CardDescription>Tell us what you want to build. Be as descriptive as possible!</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <FormField
                      control={form.control}
                      name="prompt"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <Textarea
                              placeholder="e.g., A personal portfolio website with a dark theme, a section for my projects, and a contact form."
                              className="min-h-[150px] resize-y"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                  <CardFooter>
                    <Button type="submit" disabled={isLoading} className="w-full font-semibold">
                      {isLoading ? (
                        <>
                          <Loader className="mr-2 h-4 w-4 animate-spin" />
                          Generating...
                        </>
                      ) : (
                        <>
                          Generate Website
                          <ArrowRight className="ml-2 h-4 w-4" />
                        </>
                      )}
                    </Button>
                  </CardFooter>
                </form>
              </Form>
            </Card>
          </motion.section>
          
          <motion.section
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="min-h-[60vh]"
          >
            <AnimatePresence mode="wait">
            {isLoading ? (
              <motion.div key="loader" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between">
                    <Skeleton className="h-8 w-1/3" />
                    <Skeleton className="h-10 w-24" />
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <Skeleton className="h-10 w-full" />
                    <Skeleton className="aspect-video w-full" />
                  </CardContent>
                </Card>
              </motion.div>
            ) : !generatedCode ? (
              <motion.div key="placeholder" initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.95 }}>
                 <Card className="flex min-h-[60vh] items-center justify-center border-dashed border-2">
                  <div className="text-center p-8">
                    <div className="mx-auto w-fit rounded-full bg-secondary p-4">
                      <Eye className="h-12 w-12 text-muted-foreground" />
                    </div>
                    <h3 className="mt-6 text-xl font-medium">Preview Your Website</h3>
                    <p className="mt-1 text-muted-foreground">
                      Your generated website preview will appear here.
                    </p>
                  </div>
                </Card>
              </motion.div>
            ) : (
              <motion.div key="result" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                <Card className="shadow-lg">
                  <Tabs defaultValue="preview" className="w-full">
                    <CardHeader className="flex flex-row items-center justify-between">
                        <TabsList>
                          <TabsTrigger value="preview">Preview</TabsTrigger>
                          <TabsTrigger value="html">HTML</TabsTrigger>
                          <TabsTrigger value="css">CSS</TabsTrigger>
                          {generatedCode.javascript && <TabsTrigger value="js">JS</TabsTrigger>}
                        </TabsList>
                        <Button onClick={downloadCode} variant="outline">
                          <Download className="mr-2 h-4 w-4" />
                          Download
                        </Button>
                    </CardHeader>
                    <CardContent>
                      <TabsContent value="preview">
                        <iframe
                          srcDoc={srcDoc}
                          title="Website Preview"
                          sandbox="allow-scripts allow-same-origin"
                          className="w-full h-[600px] border rounded-md bg-white"
                          loading="lazy"
                        />
                      </TabsContent>
                      <TabsContent value="html">
                        <CodeViewer code={generatedCode.html} language="html" />
                      </TabsContent>
                      <TabsContent value="css">
                        <CodeViewer code={generatedCode.css} language="css" />
                      </TabsContent>
                      {generatedCode.javascript && (
                        <TabsContent value="js">
                            <CodeViewer code={generatedCode.javascript} language="javascript" />
                        </TabsContent>
                      )}
                    </CardContent>
                  </Tabs>
                </Card>
              </motion.div>
            )}
            </AnimatePresence>
          </section>
        </main>
      </div>
    </div>
  );
}
